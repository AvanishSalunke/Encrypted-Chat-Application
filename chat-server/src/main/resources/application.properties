# Application Name
spring.application.name=chat-server

# Server Configuration
# --- THIS IS THE FIX ---
# Use the $PORT variable provided by Render, defaulting to 10000
server.port=${PORT:10000}

# TLS/SSL Settings
# --- THESE MUST BE DISABLED ---
# Render handles SSL termination for us. The app must run HTTP.
server.ssl.enabled=false
# server.ssl.key-store=classpath:keystore.p12
# server.ssl.key-store-password=mohammed
# server.ssl.key-store-type=PKCS12
# server.ssl.key-alias=chatserver

# H2 Database Configuration
spring.datasource.url=jdbc:h2:file:./data/chatdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=

# JPA Configuration
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

# H2 Console
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

# Session Configuration
server.servlet.session.timeout=30m
server.servlet.session.cookie.http-only=true
# This is also safer to disable, as the internal connection is http
# server.servlet.session.cookie.secure=true 
server.servlet.session.cookie.same-site=lax

# CORS Configuration
# --- DISABLING THIS ---
# We already handle CORS in SecurityConfig.java. 
# It's better to manage it in one place to avoid conflicts.
# spring.web.cors.allowed-origins=https://encrypted-chat-application.vercel.app
# spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
# spring.web.cors.allowed-headers=*
# spring.web.cors.allow-credentials=true